// Generated by gencpp from file fusion/fusion_obj.msg
// DO NOT EDIT!


#ifndef FUSION_MESSAGE_FUSION_OBJ_H
#define FUSION_MESSAGE_FUSION_OBJ_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fusion
{
template <class ContainerAllocator>
struct fusion_obj_
{
  typedef fusion_obj_<ContainerAllocator> Type;

  fusion_obj_()
    : ID(0)
    , timestamp(0)
    , DistX(0.0)
    , DistY(0.0)
    , VrelX(0.0)
    , VrelY(0.0)
    , ArelX(0.0)
    , ArelY(0.0)
    , Class(0)
    , Length(0.0)
    , Width(0.0)  {
    }
  fusion_obj_(const ContainerAllocator& _alloc)
    : ID(0)
    , timestamp(0)
    , DistX(0.0)
    , DistY(0.0)
    , VrelX(0.0)
    , VrelY(0.0)
    , ArelX(0.0)
    , ArelY(0.0)
    , Class(0)
    , Length(0.0)
    , Width(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _ID_type;
  _ID_type ID;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef float _DistX_type;
  _DistX_type DistX;

   typedef float _DistY_type;
  _DistY_type DistY;

   typedef float _VrelX_type;
  _VrelX_type VrelX;

   typedef float _VrelY_type;
  _VrelY_type VrelY;

   typedef float _ArelX_type;
  _ArelX_type ArelX;

   typedef float _ArelY_type;
  _ArelY_type ArelY;

   typedef uint8_t _Class_type;
  _Class_type Class;

   typedef float _Length_type;
  _Length_type Length;

   typedef float _Width_type;
  _Width_type Width;




  typedef boost::shared_ptr< ::fusion::fusion_obj_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fusion::fusion_obj_<ContainerAllocator> const> ConstPtr;

}; // struct fusion_obj_

typedef ::fusion::fusion_obj_<std::allocator<void> > fusion_obj;

typedef boost::shared_ptr< ::fusion::fusion_obj > fusion_objPtr;
typedef boost::shared_ptr< ::fusion::fusion_obj const> fusion_objConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fusion::fusion_obj_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fusion::fusion_obj_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fusion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'fusion': ['/home/michael/Desktop/Intell_driving/ROS_Intell_Driving/src/fusion/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fusion::fusion_obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fusion::fusion_obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion::fusion_obj_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion::fusion_obj_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion::fusion_obj_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion::fusion_obj_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fusion::fusion_obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f09b42ee033a9e4979d12257c9a761dd";
  }

  static const char* value(const ::fusion::fusion_obj_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf09b42ee033a9e49ULL;
  static const uint64_t static_value2 = 0x79d12257c9a761ddULL;
};

template<class ContainerAllocator>
struct DataType< ::fusion::fusion_obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fusion/fusion_obj";
  }

  static const char* value(const ::fusion::fusion_obj_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fusion::fusion_obj_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 ID\n\
uint32 timestamp\n\
float32 DistX\n\
float32 DistY\n\
float32 VrelX\n\
float32 VrelY\n\
float32 ArelX\n\
float32 ArelY\n\
uint8 Class\n\
float32 Length\n\
float32 Width\n\
";
  }

  static const char* value(const ::fusion::fusion_obj_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fusion::fusion_obj_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.timestamp);
      stream.next(m.DistX);
      stream.next(m.DistY);
      stream.next(m.VrelX);
      stream.next(m.VrelY);
      stream.next(m.ArelX);
      stream.next(m.ArelY);
      stream.next(m.Class);
      stream.next(m.Length);
      stream.next(m.Width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fusion_obj_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fusion::fusion_obj_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fusion::fusion_obj_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "DistX: ";
    Printer<float>::stream(s, indent + "  ", v.DistX);
    s << indent << "DistY: ";
    Printer<float>::stream(s, indent + "  ", v.DistY);
    s << indent << "VrelX: ";
    Printer<float>::stream(s, indent + "  ", v.VrelX);
    s << indent << "VrelY: ";
    Printer<float>::stream(s, indent + "  ", v.VrelY);
    s << indent << "ArelX: ";
    Printer<float>::stream(s, indent + "  ", v.ArelX);
    s << indent << "ArelY: ";
    Printer<float>::stream(s, indent + "  ", v.ArelY);
    s << indent << "Class: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Class);
    s << indent << "Length: ";
    Printer<float>::stream(s, indent + "  ", v.Length);
    s << indent << "Width: ";
    Printer<float>::stream(s, indent + "  ", v.Width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSION_MESSAGE_FUSION_OBJ_H
