// Generated by gencpp from file fusion/fusion_obj_multi.msg
// DO NOT EDIT!


#ifndef FUSION_MESSAGE_FUSION_OBJ_MULTI_H
#define FUSION_MESSAGE_FUSION_OBJ_MULTI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fusion/fusion_obj.h>

namespace fusion
{
template <class ContainerAllocator>
struct fusion_obj_multi_
{
  typedef fusion_obj_multi_<ContainerAllocator> Type;

  fusion_obj_multi_()
    : objs()  {
    }
  fusion_obj_multi_(const ContainerAllocator& _alloc)
    : objs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::fusion::fusion_obj_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fusion::fusion_obj_<ContainerAllocator> >::other >  _objs_type;
  _objs_type objs;




  typedef boost::shared_ptr< ::fusion::fusion_obj_multi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fusion::fusion_obj_multi_<ContainerAllocator> const> ConstPtr;

}; // struct fusion_obj_multi_

typedef ::fusion::fusion_obj_multi_<std::allocator<void> > fusion_obj_multi;

typedef boost::shared_ptr< ::fusion::fusion_obj_multi > fusion_obj_multiPtr;
typedef boost::shared_ptr< ::fusion::fusion_obj_multi const> fusion_obj_multiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fusion::fusion_obj_multi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fusion::fusion_obj_multi_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fusion

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'fusion': ['/home/michael/Desktop/Intell_driving/ROS_Intell_Driving/src/fusion/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fusion::fusion_obj_multi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fusion::fusion_obj_multi_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion::fusion_obj_multi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fusion::fusion_obj_multi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion::fusion_obj_multi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fusion::fusion_obj_multi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fusion::fusion_obj_multi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5bc9a4420be606c978ba06768536a6fa";
  }

  static const char* value(const ::fusion::fusion_obj_multi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5bc9a4420be606c9ULL;
  static const uint64_t static_value2 = 0x78ba06768536a6faULL;
};

template<class ContainerAllocator>
struct DataType< ::fusion::fusion_obj_multi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fusion/fusion_obj_multi";
  }

  static const char* value(const ::fusion::fusion_obj_multi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fusion::fusion_obj_multi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fusion_obj[] objs\n\
\n\
================================================================================\n\
MSG: fusion/fusion_obj\n\
uint16 ID\n\
uint32 timestamp\n\
float32 DistX\n\
float32 DistY\n\
float32 VrelX\n\
float32 VrelY\n\
float32 ArelX\n\
float32 ArelY\n\
uint8 Class\n\
float32 Length\n\
float32 Width\n\
";
  }

  static const char* value(const ::fusion::fusion_obj_multi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fusion::fusion_obj_multi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fusion_obj_multi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fusion::fusion_obj_multi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fusion::fusion_obj_multi_<ContainerAllocator>& v)
  {
    s << indent << "objs[]" << std::endl;
    for (size_t i = 0; i < v.objs.size(); ++i)
    {
      s << indent << "  objs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fusion::fusion_obj_<ContainerAllocator> >::stream(s, indent + "    ", v.objs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUSION_MESSAGE_FUSION_OBJ_MULTI_H
