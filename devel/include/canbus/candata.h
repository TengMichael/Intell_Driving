// Generated by gencpp from file canbus/candata.msg
// DO NOT EDIT!


#ifndef CANBUS_MESSAGE_CANDATA_H
#define CANBUS_MESSAGE_CANDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace canbus
{
template <class ContainerAllocator>
struct candata_
{
  typedef candata_<ContainerAllocator> Type;

  candata_()
    : id(0)
    , timestamp(0)
    , data()  {
      data.assign(0);
  }
  candata_(const ContainerAllocator& _alloc)
    : id(0)
    , timestamp(0)
    , data()  {
  (void)_alloc;
      data.assign(0);
  }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef boost::array<uint8_t, 8>  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::canbus::candata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::canbus::candata_<ContainerAllocator> const> ConstPtr;

}; // struct candata_

typedef ::canbus::candata_<std::allocator<void> > candata;

typedef boost::shared_ptr< ::canbus::candata > candataPtr;
typedef boost::shared_ptr< ::canbus::candata const> candataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::canbus::candata_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::canbus::candata_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace canbus

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'canbus': ['/home/michael/Desktop/Intell_driving/ROS_Intell_Driving/src/canbus/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::canbus::candata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::canbus::candata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canbus::candata_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::canbus::candata_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus::candata_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::canbus::candata_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::canbus::candata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc682d06ccc5b51f8683eea2bd2ab80d";
  }

  static const char* value(const ::canbus::candata_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc682d06ccc5b51fULL;
  static const uint64_t static_value2 = 0x8683eea2bd2ab80dULL;
};

template<class ContainerAllocator>
struct DataType< ::canbus::candata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "canbus/candata";
  }

  static const char* value(const ::canbus::candata_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::canbus::candata_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n\
uint32 timestamp\n\
uint8[8] data\n\
";
  }

  static const char* value(const ::canbus::candata_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::canbus::candata_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.timestamp);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct candata_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::canbus::candata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::canbus::candata_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CANBUS_MESSAGE_CANDATA_H
