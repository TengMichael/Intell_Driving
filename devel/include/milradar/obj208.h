// Generated by gencpp from file milradar/obj208.msg
// DO NOT EDIT!


#ifndef MILRADAR_MESSAGE_OBJ208_H
#define MILRADAR_MESSAGE_OBJ208_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace milradar
{
template <class ContainerAllocator>
struct obj208_
{
  typedef obj208_<ContainerAllocator> Type;

  obj208_()
    : ID(0)
    , DistX(0.0)
    , DistY(0.0)
    , index(0)
    , VrelX(0.0)
    , VrelY(0.0)
    , RCS(0.0)
    , Lifetime(0.0)  {
    }
  obj208_(const ContainerAllocator& _alloc)
    : ID(0)
    , DistX(0.0)
    , DistY(0.0)
    , index(0)
    , VrelX(0.0)
    , VrelY(0.0)
    , RCS(0.0)
    , Lifetime(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _ID_type;
  _ID_type ID;

   typedef float _DistX_type;
  _DistX_type DistX;

   typedef float _DistY_type;
  _DistY_type DistY;

   typedef uint8_t _index_type;
  _index_type index;

   typedef float _VrelX_type;
  _VrelX_type VrelX;

   typedef float _VrelY_type;
  _VrelY_type VrelY;

   typedef float _RCS_type;
  _RCS_type RCS;

   typedef float _Lifetime_type;
  _Lifetime_type Lifetime;




  typedef boost::shared_ptr< ::milradar::obj208_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::milradar::obj208_<ContainerAllocator> const> ConstPtr;

}; // struct obj208_

typedef ::milradar::obj208_<std::allocator<void> > obj208;

typedef boost::shared_ptr< ::milradar::obj208 > obj208Ptr;
typedef boost::shared_ptr< ::milradar::obj208 const> obj208ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::milradar::obj208_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::milradar::obj208_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace milradar

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'milradar': ['/home/michael/Desktop/Intell_driving/ROS_Intell_Driving/src/milradar/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::milradar::obj208_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::milradar::obj208_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::milradar::obj208_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::milradar::obj208_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::milradar::obj208_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::milradar::obj208_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::milradar::obj208_<ContainerAllocator> >
{
  static const char* value()
  {
    return "877e2a00fa1ceb509828c3b1f5ccd38a";
  }

  static const char* value(const ::milradar::obj208_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x877e2a00fa1ceb50ULL;
  static const uint64_t static_value2 = 0x9828c3b1f5ccd38aULL;
};

template<class ContainerAllocator>
struct DataType< ::milradar::obj208_<ContainerAllocator> >
{
  static const char* value()
  {
    return "milradar/obj208";
  }

  static const char* value(const ::milradar::obj208_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::milradar::obj208_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 ID\n\
float32 DistX\n\
float32 DistY\n\
uint8 index\n\
float32 VrelX\n\
float32 VrelY\n\
float32 RCS\n\
float32 Lifetime\n\
";
  }

  static const char* value(const ::milradar::obj208_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::milradar::obj208_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ID);
      stream.next(m.DistX);
      stream.next(m.DistY);
      stream.next(m.index);
      stream.next(m.VrelX);
      stream.next(m.VrelY);
      stream.next(m.RCS);
      stream.next(m.Lifetime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct obj208_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::milradar::obj208_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::milradar::obj208_<ContainerAllocator>& v)
  {
    s << indent << "ID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ID);
    s << indent << "DistX: ";
    Printer<float>::stream(s, indent + "  ", v.DistX);
    s << indent << "DistY: ";
    Printer<float>::stream(s, indent + "  ", v.DistY);
    s << indent << "index: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.index);
    s << indent << "VrelX: ";
    Printer<float>::stream(s, indent + "  ", v.VrelX);
    s << indent << "VrelY: ";
    Printer<float>::stream(s, indent + "  ", v.VrelY);
    s << indent << "RCS: ";
    Printer<float>::stream(s, indent + "  ", v.RCS);
    s << indent << "Lifetime: ";
    Printer<float>::stream(s, indent + "  ", v.Lifetime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MILRADAR_MESSAGE_OBJ208_H
