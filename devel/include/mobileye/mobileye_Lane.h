// Generated by gencpp from file mobileye/mobileye_Lane.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MESSAGE_MOBILEYE_LANE_H
#define MOBILEYE_MESSAGE_MOBILEYE_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye
{
template <class ContainerAllocator>
struct mobileye_Lane_
{
  typedef mobileye_Lane_<ContainerAllocator> Type;

  mobileye_Lane_()
    : Curvature(0.0)
    , Heading(0.0)
    , Left_Dist(0.0)
    , Right_Dist(0.0)
    , Left_Type(0)
    , Right_Type(0)
    , Left_Conf(0)
    , Right_Conf(0)
    , Left_LDW_avai(0)
    , Right_LDW_avai(0)
    , Constr_Area(0)
    , YawAngle(0.0)
    , PitchAngle(0.0)  {
    }
  mobileye_Lane_(const ContainerAllocator& _alloc)
    : Curvature(0.0)
    , Heading(0.0)
    , Left_Dist(0.0)
    , Right_Dist(0.0)
    , Left_Type(0)
    , Right_Type(0)
    , Left_Conf(0)
    , Right_Conf(0)
    , Left_LDW_avai(0)
    , Right_LDW_avai(0)
    , Constr_Area(0)
    , YawAngle(0.0)
    , PitchAngle(0.0)  {
  (void)_alloc;
    }



   typedef float _Curvature_type;
  _Curvature_type Curvature;

   typedef float _Heading_type;
  _Heading_type Heading;

   typedef float _Left_Dist_type;
  _Left_Dist_type Left_Dist;

   typedef float _Right_Dist_type;
  _Right_Dist_type Right_Dist;

   typedef uint8_t _Left_Type_type;
  _Left_Type_type Left_Type;

   typedef uint8_t _Right_Type_type;
  _Right_Type_type Right_Type;

   typedef uint8_t _Left_Conf_type;
  _Left_Conf_type Left_Conf;

   typedef uint8_t _Right_Conf_type;
  _Right_Conf_type Right_Conf;

   typedef uint8_t _Left_LDW_avai_type;
  _Left_LDW_avai_type Left_LDW_avai;

   typedef uint8_t _Right_LDW_avai_type;
  _Right_LDW_avai_type Right_LDW_avai;

   typedef uint8_t _Constr_Area_type;
  _Constr_Area_type Constr_Area;

   typedef float _YawAngle_type;
  _YawAngle_type YawAngle;

   typedef float _PitchAngle_type;
  _PitchAngle_type PitchAngle;




  typedef boost::shared_ptr< ::mobileye::mobileye_Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye::mobileye_Lane_<ContainerAllocator> const> ConstPtr;

}; // struct mobileye_Lane_

typedef ::mobileye::mobileye_Lane_<std::allocator<void> > mobileye_Lane;

typedef boost::shared_ptr< ::mobileye::mobileye_Lane > mobileye_LanePtr;
typedef boost::shared_ptr< ::mobileye::mobileye_Lane const> mobileye_LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye::mobileye_Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye::mobileye_Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mobileye

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mobileye': ['/home/silentroar/Desktop/ROS_Intell_Driving/src/mobileye/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye::mobileye_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e250089b833df5ee2a8ae64f26afe8d3";
  }

  static const char* value(const ::mobileye::mobileye_Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe250089b833df5eeULL;
  static const uint64_t static_value2 = 0x2a8ae64f26afe8d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye::mobileye_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye/mobileye_Lane";
  }

  static const char* value(const ::mobileye::mobileye_Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye::mobileye_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Curvature\n\
float32 Heading\n\
float32 Left_Dist\n\
float32 Right_Dist\n\
uint8 Left_Type\n\
uint8 Right_Type\n\
uint8 Left_Conf\n\
uint8 Right_Conf\n\
uint8 Left_LDW_avai\n\
uint8 Right_LDW_avai\n\
uint8 Constr_Area\n\
float32 YawAngle\n\
float32 PitchAngle\n\
\n\
";
  }

  static const char* value(const ::mobileye::mobileye_Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye::mobileye_Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Curvature);
      stream.next(m.Heading);
      stream.next(m.Left_Dist);
      stream.next(m.Right_Dist);
      stream.next(m.Left_Type);
      stream.next(m.Right_Type);
      stream.next(m.Left_Conf);
      stream.next(m.Right_Conf);
      stream.next(m.Left_LDW_avai);
      stream.next(m.Right_LDW_avai);
      stream.next(m.Constr_Area);
      stream.next(m.YawAngle);
      stream.next(m.PitchAngle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mobileye_Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye::mobileye_Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye::mobileye_Lane_<ContainerAllocator>& v)
  {
    s << indent << "Curvature: ";
    Printer<float>::stream(s, indent + "  ", v.Curvature);
    s << indent << "Heading: ";
    Printer<float>::stream(s, indent + "  ", v.Heading);
    s << indent << "Left_Dist: ";
    Printer<float>::stream(s, indent + "  ", v.Left_Dist);
    s << indent << "Right_Dist: ";
    Printer<float>::stream(s, indent + "  ", v.Right_Dist);
    s << indent << "Left_Type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Left_Type);
    s << indent << "Right_Type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Right_Type);
    s << indent << "Left_Conf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Left_Conf);
    s << indent << "Right_Conf: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Right_Conf);
    s << indent << "Left_LDW_avai: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Left_LDW_avai);
    s << indent << "Right_LDW_avai: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Right_LDW_avai);
    s << indent << "Constr_Area: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Constr_Area);
    s << indent << "YawAngle: ";
    Printer<float>::stream(s, indent + "  ", v.YawAngle);
    s << indent << "PitchAngle: ";
    Printer<float>::stream(s, indent + "  ", v.PitchAngle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MESSAGE_MOBILEYE_LANE_H
