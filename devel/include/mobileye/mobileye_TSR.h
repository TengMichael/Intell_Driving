// Generated by gencpp from file mobileye/mobileye_TSR.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MESSAGE_MOBILEYE_TSR_H
#define MOBILEYE_MESSAGE_MOBILEYE_TSR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye
{
template <class ContainerAllocator>
struct mobileye_TSR_
{
  typedef mobileye_TSR_<ContainerAllocator> Type;

  mobileye_TSR_()
    : MType(0)
    , SupType(0)
    , PosX(0.0)
    , PosY(0.0)
    , PosZ(0.0)
    , FilterType(0)  {
    }
  mobileye_TSR_(const ContainerAllocator& _alloc)
    : MType(0)
    , SupType(0)
    , PosX(0.0)
    , PosY(0.0)
    , PosZ(0.0)
    , FilterType(0)  {
  (void)_alloc;
    }



   typedef uint8_t _MType_type;
  _MType_type MType;

   typedef uint8_t _SupType_type;
  _SupType_type SupType;

   typedef float _PosX_type;
  _PosX_type PosX;

   typedef float _PosY_type;
  _PosY_type PosY;

   typedef float _PosZ_type;
  _PosZ_type PosZ;

   typedef uint8_t _FilterType_type;
  _FilterType_type FilterType;




  typedef boost::shared_ptr< ::mobileye::mobileye_TSR_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye::mobileye_TSR_<ContainerAllocator> const> ConstPtr;

}; // struct mobileye_TSR_

typedef ::mobileye::mobileye_TSR_<std::allocator<void> > mobileye_TSR;

typedef boost::shared_ptr< ::mobileye::mobileye_TSR > mobileye_TSRPtr;
typedef boost::shared_ptr< ::mobileye::mobileye_TSR const> mobileye_TSRConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye::mobileye_TSR_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye::mobileye_TSR_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mobileye

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mobileye': ['/home/silentroar/Desktop/ROS_Intell_Driving/src/mobileye/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_TSR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_TSR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_TSR_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_TSR_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_TSR_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_TSR_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye::mobileye_TSR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6519f710ac25fe67cd32cf09bf9fb46";
  }

  static const char* value(const ::mobileye::mobileye_TSR_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6519f710ac25fe6ULL;
  static const uint64_t static_value2 = 0x7cd32cf09bf9fb46ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye::mobileye_TSR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye/mobileye_TSR";
  }

  static const char* value(const ::mobileye::mobileye_TSR_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye::mobileye_TSR_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MType\n\
uint8 SupType\n\
float32 PosX\n\
float32 PosY\n\
float32 PosZ\n\
uint8 FilterType\n\
";
  }

  static const char* value(const ::mobileye::mobileye_TSR_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye::mobileye_TSR_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.MType);
      stream.next(m.SupType);
      stream.next(m.PosX);
      stream.next(m.PosY);
      stream.next(m.PosZ);
      stream.next(m.FilterType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mobileye_TSR_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye::mobileye_TSR_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye::mobileye_TSR_<ContainerAllocator>& v)
  {
    s << indent << "MType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MType);
    s << indent << "SupType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SupType);
    s << indent << "PosX: ";
    Printer<float>::stream(s, indent + "  ", v.PosX);
    s << indent << "PosY: ";
    Printer<float>::stream(s, indent + "  ", v.PosY);
    s << indent << "PosZ: ";
    Printer<float>::stream(s, indent + "  ", v.PosZ);
    s << indent << "FilterType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FilterType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MESSAGE_MOBILEYE_TSR_H
