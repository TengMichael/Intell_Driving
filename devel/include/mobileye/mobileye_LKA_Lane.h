// Generated by gencpp from file mobileye/mobileye_LKA_Lane.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MESSAGE_MOBILEYE_LKA_LANE_H
#define MOBILEYE_MESSAGE_MOBILEYE_LKA_LANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mobileye
{
template <class ContainerAllocator>
struct mobileye_LKA_Lane_
{
  typedef mobileye_LKA_Lane_<ContainerAllocator> Type;

  mobileye_LKA_Lane_()
    : MType(0)
    , Quality(0)
    , Model_degree(0)
    , Position(0.0)
    , Curvature(0.0)
    , Heading(0.0)
    , Curvature_deriv(0.0)
    , Width(0.0)
    , View_range(0.0)  {
    }
  mobileye_LKA_Lane_(const ContainerAllocator& _alloc)
    : MType(0)
    , Quality(0)
    , Model_degree(0)
    , Position(0.0)
    , Curvature(0.0)
    , Heading(0.0)
    , Curvature_deriv(0.0)
    , Width(0.0)
    , View_range(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _MType_type;
  _MType_type MType;

   typedef uint8_t _Quality_type;
  _Quality_type Quality;

   typedef uint8_t _Model_degree_type;
  _Model_degree_type Model_degree;

   typedef float _Position_type;
  _Position_type Position;

   typedef float _Curvature_type;
  _Curvature_type Curvature;

   typedef float _Heading_type;
  _Heading_type Heading;

   typedef float _Curvature_deriv_type;
  _Curvature_deriv_type Curvature_deriv;

   typedef float _Width_type;
  _Width_type Width;

   typedef float _View_range_type;
  _View_range_type View_range;




  typedef boost::shared_ptr< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> const> ConstPtr;

}; // struct mobileye_LKA_Lane_

typedef ::mobileye::mobileye_LKA_Lane_<std::allocator<void> > mobileye_LKA_Lane;

typedef boost::shared_ptr< ::mobileye::mobileye_LKA_Lane > mobileye_LKA_LanePtr;
typedef boost::shared_ptr< ::mobileye::mobileye_LKA_Lane const> mobileye_LKA_LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mobileye

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mobileye': ['/home/michael/Desktop/Intell_driving/ROS_Intell_Driving/src/mobileye/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5f536a85eb5e6c93cc0441013010300e";
  }

  static const char* value(const ::mobileye::mobileye_LKA_Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5f536a85eb5e6c93ULL;
  static const uint64_t static_value2 = 0xcc0441013010300eULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye/mobileye_LKA_Lane";
  }

  static const char* value(const ::mobileye::mobileye_LKA_Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 MType\n\
uint8 Quality\n\
uint8 Model_degree\n\
float32 Position\n\
float32 Curvature\n\
float32 Heading\n\
float32 Curvature_deriv\n\
float32 Width\n\
float32 View_range\n\
";
  }

  static const char* value(const ::mobileye::mobileye_LKA_Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.MType);
      stream.next(m.Quality);
      stream.next(m.Model_degree);
      stream.next(m.Position);
      stream.next(m.Curvature);
      stream.next(m.Heading);
      stream.next(m.Curvature_deriv);
      stream.next(m.Width);
      stream.next(m.View_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mobileye_LKA_Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye::mobileye_LKA_Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye::mobileye_LKA_Lane_<ContainerAllocator>& v)
  {
    s << indent << "MType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MType);
    s << indent << "Quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Quality);
    s << indent << "Model_degree: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Model_degree);
    s << indent << "Position: ";
    Printer<float>::stream(s, indent + "  ", v.Position);
    s << indent << "Curvature: ";
    Printer<float>::stream(s, indent + "  ", v.Curvature);
    s << indent << "Heading: ";
    Printer<float>::stream(s, indent + "  ", v.Heading);
    s << indent << "Curvature_deriv: ";
    Printer<float>::stream(s, indent + "  ", v.Curvature_deriv);
    s << indent << "Width: ";
    Printer<float>::stream(s, indent + "  ", v.Width);
    s << indent << "View_range: ";
    Printer<float>::stream(s, indent + "  ", v.View_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MESSAGE_MOBILEYE_LKA_LANE_H
