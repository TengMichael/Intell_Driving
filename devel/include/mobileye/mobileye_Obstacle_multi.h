// Generated by gencpp from file mobileye/mobileye_Obstacle_multi.msg
// DO NOT EDIT!


#ifndef MOBILEYE_MESSAGE_MOBILEYE_OBSTACLE_MULTI_H
#define MOBILEYE_MESSAGE_MOBILEYE_OBSTACLE_MULTI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mobileye/mobileye_Obstacle.h>

namespace mobileye
{
template <class ContainerAllocator>
struct mobileye_Obstacle_multi_
{
  typedef mobileye_Obstacle_multi_<ContainerAllocator> Type;

  mobileye_Obstacle_multi_()
    : Obstacles()  {
    }
  mobileye_Obstacle_multi_(const ContainerAllocator& _alloc)
    : Obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::mobileye::mobileye_Obstacle_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::mobileye::mobileye_Obstacle_<ContainerAllocator> >::other >  _Obstacles_type;
  _Obstacles_type Obstacles;




  typedef boost::shared_ptr< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> const> ConstPtr;

}; // struct mobileye_Obstacle_multi_

typedef ::mobileye::mobileye_Obstacle_multi_<std::allocator<void> > mobileye_Obstacle_multi;

typedef boost::shared_ptr< ::mobileye::mobileye_Obstacle_multi > mobileye_Obstacle_multiPtr;
typedef boost::shared_ptr< ::mobileye::mobileye_Obstacle_multi const> mobileye_Obstacle_multiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mobileye

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mobileye': ['/home/michael/Desktop/Intell_driving/ROS_Intell_Driving/src/mobileye/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "915a530a0724fce732099e5ed869e2b4";
  }

  static const char* value(const ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x915a530a0724fce7ULL;
  static const uint64_t static_value2 = 0x32099e5ed869e2b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye/mobileye_Obstacle_multi";
  }

  static const char* value(const ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mobileye_Obstacle[] Obstacles\n\
\n\
================================================================================\n\
MSG: mobileye/mobileye_Obstacle\n\
uint8 ID\n\
float32 PosX\n\
float32 PosY\n\
uint8 Blinker\n\
uint8 CutState\n\
float32 VrelX\n\
uint8 MType\n\
uint8 Status\n\
uint8 Brake\n\
uint8 Valid\n\
float32 Length\n\
float32 Width\n\
uint8 Age\n\
uint8 ObsLane\n\
uint8 CIPV\n\
float32 AngleRate\n\
float32 ScaleChange\n\
float32 AccelX\n\
float32 Angle\n\
uint8 Replaced\n\
";
  }

  static const char* value(const ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mobileye_Obstacle_multi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mobileye::mobileye_Obstacle_multi_<ContainerAllocator>& v)
  {
    s << indent << "Obstacles[]" << std::endl;
    for (size_t i = 0; i < v.Obstacles.size(); ++i)
    {
      s << indent << "  Obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mobileye::mobileye_Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.Obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOBILEYE_MESSAGE_MOBILEYE_OBSTACLE_MULTI_H
