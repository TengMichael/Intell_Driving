# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mobileye/mobileye_LKA_Lane_multi.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mobileye.msg

class mobileye_LKA_Lane_multi(genpy.Message):
  _md5sum = "c48a8b814bcf2e7a5ec962b23742a691"
  _type = "mobileye/mobileye_LKA_Lane_multi"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """mobileye_LKA_Lane Left
mobileye_LKA_Lane Right
mobileye_LKA_Lane Next_Left
mobileye_LKA_Lane Next_Right

================================================================================
MSG: mobileye/mobileye_LKA_Lane
uint8 MType
uint8 Quality
uint8 Model_degree
float32 Position
float32 Curvature
float32 Heading
float32 Curvature_deriv
float32 Width
float32 View_range
"""
  __slots__ = ['Left','Right','Next_Left','Next_Right']
  _slot_types = ['mobileye/mobileye_LKA_Lane','mobileye/mobileye_LKA_Lane','mobileye/mobileye_LKA_Lane','mobileye/mobileye_LKA_Lane']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Left,Right,Next_Left,Next_Right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(mobileye_LKA_Lane_multi, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Left is None:
        self.Left = mobileye.msg.mobileye_LKA_Lane()
      if self.Right is None:
        self.Right = mobileye.msg.mobileye_LKA_Lane()
      if self.Next_Left is None:
        self.Next_Left = mobileye.msg.mobileye_LKA_Lane()
      if self.Next_Right is None:
        self.Next_Right = mobileye.msg.mobileye_LKA_Lane()
    else:
      self.Left = mobileye.msg.mobileye_LKA_Lane()
      self.Right = mobileye.msg.mobileye_LKA_Lane()
      self.Next_Left = mobileye.msg.mobileye_LKA_Lane()
      self.Next_Right = mobileye.msg.mobileye_LKA_Lane()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B6f3B6f3B6f3B6f.pack(_x.Left.MType, _x.Left.Quality, _x.Left.Model_degree, _x.Left.Position, _x.Left.Curvature, _x.Left.Heading, _x.Left.Curvature_deriv, _x.Left.Width, _x.Left.View_range, _x.Right.MType, _x.Right.Quality, _x.Right.Model_degree, _x.Right.Position, _x.Right.Curvature, _x.Right.Heading, _x.Right.Curvature_deriv, _x.Right.Width, _x.Right.View_range, _x.Next_Left.MType, _x.Next_Left.Quality, _x.Next_Left.Model_degree, _x.Next_Left.Position, _x.Next_Left.Curvature, _x.Next_Left.Heading, _x.Next_Left.Curvature_deriv, _x.Next_Left.Width, _x.Next_Left.View_range, _x.Next_Right.MType, _x.Next_Right.Quality, _x.Next_Right.Model_degree, _x.Next_Right.Position, _x.Next_Right.Curvature, _x.Next_Right.Heading, _x.Next_Right.Curvature_deriv, _x.Next_Right.Width, _x.Next_Right.View_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Left is None:
        self.Left = mobileye.msg.mobileye_LKA_Lane()
      if self.Right is None:
        self.Right = mobileye.msg.mobileye_LKA_Lane()
      if self.Next_Left is None:
        self.Next_Left = mobileye.msg.mobileye_LKA_Lane()
      if self.Next_Right is None:
        self.Next_Right = mobileye.msg.mobileye_LKA_Lane()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.Left.MType, _x.Left.Quality, _x.Left.Model_degree, _x.Left.Position, _x.Left.Curvature, _x.Left.Heading, _x.Left.Curvature_deriv, _x.Left.Width, _x.Left.View_range, _x.Right.MType, _x.Right.Quality, _x.Right.Model_degree, _x.Right.Position, _x.Right.Curvature, _x.Right.Heading, _x.Right.Curvature_deriv, _x.Right.Width, _x.Right.View_range, _x.Next_Left.MType, _x.Next_Left.Quality, _x.Next_Left.Model_degree, _x.Next_Left.Position, _x.Next_Left.Curvature, _x.Next_Left.Heading, _x.Next_Left.Curvature_deriv, _x.Next_Left.Width, _x.Next_Left.View_range, _x.Next_Right.MType, _x.Next_Right.Quality, _x.Next_Right.Model_degree, _x.Next_Right.Position, _x.Next_Right.Curvature, _x.Next_Right.Heading, _x.Next_Right.Curvature_deriv, _x.Next_Right.Width, _x.Next_Right.View_range,) = _struct_3B6f3B6f3B6f3B6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B6f3B6f3B6f3B6f.pack(_x.Left.MType, _x.Left.Quality, _x.Left.Model_degree, _x.Left.Position, _x.Left.Curvature, _x.Left.Heading, _x.Left.Curvature_deriv, _x.Left.Width, _x.Left.View_range, _x.Right.MType, _x.Right.Quality, _x.Right.Model_degree, _x.Right.Position, _x.Right.Curvature, _x.Right.Heading, _x.Right.Curvature_deriv, _x.Right.Width, _x.Right.View_range, _x.Next_Left.MType, _x.Next_Left.Quality, _x.Next_Left.Model_degree, _x.Next_Left.Position, _x.Next_Left.Curvature, _x.Next_Left.Heading, _x.Next_Left.Curvature_deriv, _x.Next_Left.Width, _x.Next_Left.View_range, _x.Next_Right.MType, _x.Next_Right.Quality, _x.Next_Right.Model_degree, _x.Next_Right.Position, _x.Next_Right.Curvature, _x.Next_Right.Heading, _x.Next_Right.Curvature_deriv, _x.Next_Right.Width, _x.Next_Right.View_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Left is None:
        self.Left = mobileye.msg.mobileye_LKA_Lane()
      if self.Right is None:
        self.Right = mobileye.msg.mobileye_LKA_Lane()
      if self.Next_Left is None:
        self.Next_Left = mobileye.msg.mobileye_LKA_Lane()
      if self.Next_Right is None:
        self.Next_Right = mobileye.msg.mobileye_LKA_Lane()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.Left.MType, _x.Left.Quality, _x.Left.Model_degree, _x.Left.Position, _x.Left.Curvature, _x.Left.Heading, _x.Left.Curvature_deriv, _x.Left.Width, _x.Left.View_range, _x.Right.MType, _x.Right.Quality, _x.Right.Model_degree, _x.Right.Position, _x.Right.Curvature, _x.Right.Heading, _x.Right.Curvature_deriv, _x.Right.Width, _x.Right.View_range, _x.Next_Left.MType, _x.Next_Left.Quality, _x.Next_Left.Model_degree, _x.Next_Left.Position, _x.Next_Left.Curvature, _x.Next_Left.Heading, _x.Next_Left.Curvature_deriv, _x.Next_Left.Width, _x.Next_Left.View_range, _x.Next_Right.MType, _x.Next_Right.Quality, _x.Next_Right.Model_degree, _x.Next_Right.Position, _x.Next_Right.Curvature, _x.Next_Right.Heading, _x.Next_Right.Curvature_deriv, _x.Next_Right.Width, _x.Next_Right.View_range,) = _struct_3B6f3B6f3B6f3B6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B6f3B6f3B6f3B6f = struct.Struct("<3B6f3B6f3B6f3B6f")
