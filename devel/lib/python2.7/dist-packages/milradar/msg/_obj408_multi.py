# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from milradar/obj408_multi.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import milradar.msg

class obj408_multi(genpy.Message):
  _md5sum = "ce84e7d845ee0f5049aa877fc739f096"
  _type = "milradar/obj408_multi"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """obj408[] objs

================================================================================
MSG: milradar/obj408
uint8 ID
float32 DistX
float32 DistY
float32 VrelX
float32 VrelY
float32 RCS
uint8 DynProp
uint8 Orientation_rms
uint8 MeasState
uint8 ProbOfExist
float32 ArelX
float32 ArelY
uint8 Class
float32 OrientationAngel
float32 Length
float32 Width
"""
  __slots__ = ['objs']
  _slot_types = ['milradar/obj408[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       objs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obj408_multi, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.objs is None:
        self.objs = []
    else:
      self.objs = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.objs)
      buff.write(_struct_I.pack(length))
      for val1 in self.objs:
        _x = val1
        buff.write(_struct_B5f4B2fB3f.pack(_x.ID, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.objs is None:
        self.objs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objs = []
      for i in range(0, length):
        val1 = milradar.msg.obj408()
        _x = val1
        start = end
        end += 46
        (_x.ID, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width,) = _struct_B5f4B2fB3f.unpack(str[start:end])
        self.objs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.objs)
      buff.write(_struct_I.pack(length))
      for val1 in self.objs:
        _x = val1
        buff.write(_struct_B5f4B2fB3f.pack(_x.ID, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.objs is None:
        self.objs = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objs = []
      for i in range(0, length):
        val1 = milradar.msg.obj408()
        _x = val1
        start = end
        end += 46
        (_x.ID, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width,) = _struct_B5f4B2fB3f.unpack(str[start:end])
        self.objs.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B5f4B2fB3f = struct.Struct("<B5f4B2fB3f")
