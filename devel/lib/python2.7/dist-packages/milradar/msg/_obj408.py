# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from milradar/obj408.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class obj408(genpy.Message):
  _md5sum = "6746331b89c775f9d4d284533d0ef80d"
  _type = "milradar/obj408"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 ID
uint32 timestamp
float32 DistX
float32 DistY
float32 VrelX
float32 VrelY
float32 RCS
uint8 DynProp
uint8 Orientation_rms
uint8 MeasState
uint8 ProbOfExist
float32 ArelX
float32 ArelY
uint8 Class
float32 OrientationAngel
float32 Length
float32 Width
"""
  __slots__ = ['ID','timestamp','DistX','DistY','VrelX','VrelY','RCS','DynProp','Orientation_rms','MeasState','ProbOfExist','ArelX','ArelY','Class','OrientationAngel','Length','Width']
  _slot_types = ['uint8','uint32','float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','float32','float32','uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ID,timestamp,DistX,DistY,VrelX,VrelY,RCS,DynProp,Orientation_rms,MeasState,ProbOfExist,ArelX,ArelY,Class,OrientationAngel,Length,Width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obj408, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ID is None:
        self.ID = 0
      if self.timestamp is None:
        self.timestamp = 0
      if self.DistX is None:
        self.DistX = 0.
      if self.DistY is None:
        self.DistY = 0.
      if self.VrelX is None:
        self.VrelX = 0.
      if self.VrelY is None:
        self.VrelY = 0.
      if self.RCS is None:
        self.RCS = 0.
      if self.DynProp is None:
        self.DynProp = 0
      if self.Orientation_rms is None:
        self.Orientation_rms = 0
      if self.MeasState is None:
        self.MeasState = 0
      if self.ProbOfExist is None:
        self.ProbOfExist = 0
      if self.ArelX is None:
        self.ArelX = 0.
      if self.ArelY is None:
        self.ArelY = 0.
      if self.Class is None:
        self.Class = 0
      if self.OrientationAngel is None:
        self.OrientationAngel = 0.
      if self.Length is None:
        self.Length = 0.
      if self.Width is None:
        self.Width = 0.
    else:
      self.ID = 0
      self.timestamp = 0
      self.DistX = 0.
      self.DistY = 0.
      self.VrelX = 0.
      self.VrelY = 0.
      self.RCS = 0.
      self.DynProp = 0
      self.Orientation_rms = 0
      self.MeasState = 0
      self.ProbOfExist = 0
      self.ArelX = 0.
      self.ArelY = 0.
      self.Class = 0
      self.OrientationAngel = 0.
      self.Length = 0.
      self.Width = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_BI5f4B2fB3f.pack(_x.ID, _x.timestamp, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.ID, _x.timestamp, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width,) = _struct_BI5f4B2fB3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_BI5f4B2fB3f.pack(_x.ID, _x.timestamp, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 50
      (_x.ID, _x.timestamp, _x.DistX, _x.DistY, _x.VrelX, _x.VrelY, _x.RCS, _x.DynProp, _x.Orientation_rms, _x.MeasState, _x.ProbOfExist, _x.ArelX, _x.ArelY, _x.Class, _x.OrientationAngel, _x.Length, _x.Width,) = _struct_BI5f4B2fB3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_BI5f4B2fB3f = struct.Struct("<BI5f4B2fB3f")
